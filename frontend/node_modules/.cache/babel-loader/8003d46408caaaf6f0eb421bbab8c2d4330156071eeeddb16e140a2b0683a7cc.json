{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Documents\\\\GitHub\\\\monitor-ping\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [ipInput, setIpInput] = useState('');\n  const [nameInput, setNameInput] = useState('');\n  const [typeInput, setTypeInput] = useState('router');\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = useState(false); // Estado de carga\n  const [message, setMessage] = useState(''); // Mensaje de error o éxito\n  const [activeTab, setActiveTab] = useState(''); // Estado para la pestaña activa\n\n  // Validación básica de IP\n  const isValidIP = ip => {\n    const regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return regex.test(ip);\n  };\n\n  // Llamar al backend para obtener dispositivos\n  const fetchDevices = async () => {\n    setLoading(true); // Activar carga mientras obtenemos los dispositivos\n    try {\n      const res = await axios.get('http://localhost:3001/devices');\n      setDevices(res.data);\n      pingAll(res.data.map(d => d.ip)); // Hacer ping a todos los dispositivos\n    } catch (err) {\n      console.error('Error fetching devices:', err);\n    } finally {\n      setLoading(false); // Desactivar carga una vez que se obtienen los dispositivos\n    }\n  };\n\n  // Agregar un dispositivo\n  const addDevice = async () => {\n    if (!isValidIP(ipInput)) {\n      setMessage('Por favor, ingresa una IP válida');\n      return;\n    }\n    try {\n      await axios.post('http://localhost:3001/devices', {\n        ip: ipInput.trim(),\n        name: nameInput.trim(),\n        type: typeInput\n      });\n      setMessage('Dispositivo agregado con éxito!');\n      setIpInput('');\n      setNameInput('');\n      setTypeInput('router');\n      fetchDevices(); // Volver a obtener la lista de dispositivos\n    } catch (err) {\n      setMessage('Error al agregar dispositivo.');\n      console.error('Error adding device:', err);\n    }\n  };\n\n  // Eliminar un dispositivo\n  const deleteDevice = async ip => {\n    try {\n      await axios.delete(`http://localhost:3001/devices/${ip}`);\n      fetchDevices(); // Actualizar la lista de dispositivos después de eliminar uno\n    } catch (err) {\n      console.error('Error deleting device:', err);\n    }\n  };\n\n  // Hacer ping a todos los dispositivos\n  const pingAll = async ips => {\n    setLoading(true); // Activar el estado de carga mientras se hace el ping\n    try {\n      const res = await axios.post('http://localhost:3001/ping', {\n        devices: ips\n      });\n      setDevices(devices => devices.map(dev => {\n        const found = res.data.find(d => d.ip === dev.ip);\n        return found ? {\n          ...dev,\n          alive: found.alive\n        } : dev;\n      }));\n    } catch (err) {\n      console.error('Error pinging devices:', err);\n    } finally {\n      setLoading(false); // Desactivar el estado de carga una vez terminado el ping\n    }\n  };\n\n  // Obtener imagen según el tipo de dispositivo\n  const getDeviceImage = type => {\n    const deviceImages = {\n      router: '/images/router.png',\n      antena: '/images/antena.png',\n      server: '/images/server.png',\n      default: '/images/default.png'\n    };\n    return deviceImages[type] || deviceImages.default;\n  };\n\n  // Función para manejar la actualización manual de dispositivos\n  const handleUpdateDevices = () => {\n    const ips = devices.map(d => d.ip); // Obtener las IPs de todos los dispositivos\n    pingAll(ips); // Llamar a la función pingAll\n  };\n\n  // Agrupar los dispositivos por el segmento de IP\n  const groupDevicesBySegment = () => {\n    const groups = devices.reduce((acc, device) => {\n      const segment = device.ip.split('.').slice(0, 3).join('.'); // Obtener el segmento de IP\n      if (!acc[segment]) {\n        acc[segment] = [];\n      }\n      acc[segment].push(device);\n      return acc;\n    }, {});\n    return groups;\n  };\n\n  // Cambiar de pestaña\n  const handleTabChange = segment => {\n    setActiveTab(segment);\n  };\n  useEffect(() => {\n    fetchDevices(); // Llamar al inicio para obtener los dispositivos\n    const interval = setInterval(() => fetchDevices(), 60000); // Actualizar cada 60 segundos\n    return () => clearInterval(interval); // Limpiar intervalo al desmontar el componente\n  }, []);\n  const deviceGroups = groupDevicesBySegment();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monitor de Dispositivos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: ipInput,\n        onChange: e => setIpInput(e.target.value),\n        placeholder: \"Ingresa IP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: nameInput,\n        onChange: e => setNameInput(e.target.value),\n        placeholder: \"Ingresa Nombre del Dispositivo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: typeInput,\n        onChange: e => setTypeInput(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"router\",\n          children: \"Router\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"antena\",\n          children: \"Antena\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"server\",\n          children: \"Server\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addDevice,\n        children: \"Agregar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(deviceGroups).map(segment => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTabChange(segment),\n        style: {\n          margin: 5,\n          padding: 10,\n          backgroundColor: activeTab === segment ? '#007bff' : '#ddd',\n          color: activeTab === segment ? '#fff' : '#000',\n          borderRadius: 5\n        },\n        children: segment\n      }, segment, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: activeTab && deviceGroups[activeTab] && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: deviceGroups[activeTab].map(d => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            marginBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: getDeviceImage(d.type),\n            alt: d.type,\n            style: {\n              width: 30,\n              height: 30,\n              marginRight: 10\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", d.name, \" \\u2014 \", d.ip, \" \\u2014 \", d.alive == null ? '⏳' : d.alive ? '🟢 Activo' : '🔴 Inactivo', \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteDevice(d.ip),\n            style: {\n              marginLeft: 10\n            },\n            children: \"\\u274C Eliminar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)]\n        }, d.ip, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uD83D\\uDD52 Actualizando estado de dispositivos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpdateDevices,\n      children: \"Actualizar Todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eCcVJf30J179qRc+hm+z1FbQTKk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","ipInput","setIpInput","nameInput","setNameInput","typeInput","setTypeInput","devices","setDevices","loading","setLoading","message","setMessage","activeTab","setActiveTab","isValidIP","ip","regex","test","fetchDevices","res","get","data","pingAll","map","d","err","console","error","addDevice","post","trim","name","type","deleteDevice","delete","ips","dev","found","find","alive","getDeviceImage","deviceImages","router","antena","server","default","handleUpdateDevices","groupDevicesBySegment","groups","reduce","acc","device","segment","split","slice","join","push","handleTabChange","interval","setInterval","clearInterval","deviceGroups","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","value","onChange","e","target","placeholder","onClick","Object","keys","margin","backgroundColor","color","borderRadius","display","alignItems","src","alt","width","height","marginRight","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/MSI/Documents/GitHub/monitor-ping/frontend/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [ipInput, setIpInput] = useState('');\n  const [nameInput, setNameInput] = useState('');\n  const [typeInput, setTypeInput] = useState('router');\n  const [devices, setDevices] = useState([]);\n  const [loading, setLoading] = useState(false);  // Estado de carga\n  const [message, setMessage] = useState('');  // Mensaje de error o éxito\n  const [activeTab, setActiveTab] = useState('');  // Estado para la pestaña activa\n\n  // Validación básica de IP\n  const isValidIP = (ip) => {\n    const regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return regex.test(ip);\n  };\n\n  // Llamar al backend para obtener dispositivos\n  const fetchDevices = async () => {\n    setLoading(true); // Activar carga mientras obtenemos los dispositivos\n    try {\n      const res = await axios.get('http://localhost:3001/devices');\n      setDevices(res.data);\n      pingAll(res.data.map(d => d.ip));  // Hacer ping a todos los dispositivos\n    } catch (err) {\n      console.error('Error fetching devices:', err);\n    } finally {\n      setLoading(false); // Desactivar carga una vez que se obtienen los dispositivos\n    }\n  };\n\n  // Agregar un dispositivo\n  const addDevice = async () => {\n    if (!isValidIP(ipInput)) {\n      setMessage('Por favor, ingresa una IP válida');\n      return;\n    }\n\n    try {\n      await axios.post('http://localhost:3001/devices', {\n        ip: ipInput.trim(),\n        name: nameInput.trim(),\n        type: typeInput\n      });\n      setMessage('Dispositivo agregado con éxito!');\n      setIpInput('');\n      setNameInput('');\n      setTypeInput('router');\n      fetchDevices();  // Volver a obtener la lista de dispositivos\n    } catch (err) {\n      setMessage('Error al agregar dispositivo.');\n      console.error('Error adding device:', err);\n    }\n  };\n\n  // Eliminar un dispositivo\n  const deleteDevice = async (ip) => {\n    try {\n      await axios.delete(`http://localhost:3001/devices/${ip}`);\n      fetchDevices();  // Actualizar la lista de dispositivos después de eliminar uno\n    } catch (err) {\n      console.error('Error deleting device:', err);\n    }\n  };\n\n  // Hacer ping a todos los dispositivos\n  const pingAll = async (ips) => {\n    setLoading(true);  // Activar el estado de carga mientras se hace el ping\n    try {\n      const res = await axios.post('http://localhost:3001/ping', { devices: ips });\n      setDevices(devices =>\n        devices.map(dev => {\n          const found = res.data.find(d => d.ip === dev.ip);\n          return found ? { ...dev, alive: found.alive } : dev;\n        })\n      );\n    } catch (err) {\n      console.error('Error pinging devices:', err);\n    } finally {\n      setLoading(false);  // Desactivar el estado de carga una vez terminado el ping\n    }\n  };\n\n  // Obtener imagen según el tipo de dispositivo\n  const getDeviceImage = (type) => {\n    const deviceImages = {\n      router: '/images/router.png',\n      antena: '/images/antena.png',\n      server: '/images/server.png',\n      default: '/images/default.png',\n    };\n    return deviceImages[type] || deviceImages.default;\n  };\n\n  // Función para manejar la actualización manual de dispositivos\n  const handleUpdateDevices = () => {\n    const ips = devices.map(d => d.ip);  // Obtener las IPs de todos los dispositivos\n    pingAll(ips);  // Llamar a la función pingAll\n  };\n\n  // Agrupar los dispositivos por el segmento de IP\n  const groupDevicesBySegment = () => {\n    const groups = devices.reduce((acc, device) => {\n      const segment = device.ip.split('.').slice(0, 3).join('.');  // Obtener el segmento de IP\n      if (!acc[segment]) {\n        acc[segment] = [];\n      }\n      acc[segment].push(device);\n      return acc;\n    }, {});\n\n    return groups;\n  };\n\n  // Cambiar de pestaña\n  const handleTabChange = (segment) => {\n    setActiveTab(segment);\n  };\n\n  useEffect(() => {\n    fetchDevices();  // Llamar al inicio para obtener los dispositivos\n    const interval = setInterval(() => fetchDevices(), 60000);  // Actualizar cada 60 segundos\n    return () => clearInterval(interval);  // Limpiar intervalo al desmontar el componente\n  }, []);\n\n  const deviceGroups = groupDevicesBySegment();\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>Monitor de Dispositivos</h1>\n      \n      <div style={{ marginBottom: 10 }}>\n        <input\n          value={ipInput}\n          onChange={(e) => setIpInput(e.target.value)}\n          placeholder=\"Ingresa IP\"\n        />\n        <input\n          value={nameInput}\n          onChange={(e) => setNameInput(e.target.value)}\n          placeholder=\"Ingresa Nombre del Dispositivo\"\n        />\n        <select value={typeInput} onChange={(e) => setTypeInput(e.target.value)}>\n          <option value=\"router\">Router</option>\n          <option value=\"antena\">Antena</option>\n          <option value=\"server\">Server</option>\n        </select>\n        <button onClick={addDevice}>Agregar</button>\n      </div>\n\n      {message && <p>{message}</p>}\n\n      <div>\n        {/* Pestañas para cada segmento de IP */}\n        {Object.keys(deviceGroups).map(segment => (\n          <button\n            key={segment}\n            onClick={() => handleTabChange(segment)}\n            style={{\n              margin: 5,\n              padding: 10,\n              backgroundColor: activeTab === segment ? '#007bff' : '#ddd',\n              color: activeTab === segment ? '#fff' : '#000',\n              borderRadius: 5\n            }}\n          >\n            {segment}\n          </button>\n        ))}\n      </div>\n\n      {/* Mostrar dispositivos según la pestaña activa */}\n      <div>\n        {activeTab && deviceGroups[activeTab] && (\n          <ul>\n            {deviceGroups[activeTab].map((d) => (\n              <li key={d.ip} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n                <img src={getDeviceImage(d.type)} alt={d.type} style={{ width: 30, height: 30, marginRight: 10 }} />\n                <span> {d.name} — {d.ip} — {d.alive == null ? '⏳' : d.alive ? '🟢 Activo' : '🔴 Inactivo'} </span>\n                <button onClick={() => deleteDevice(d.ip)} style={{ marginLeft: 10 }}>❌ Eliminar</button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n      {loading && <p>🕒 Actualizando estado de dispositivos...</p>}\n\n      {/* Botón para actualizar manualmente los dispositivos */}\n      <button onClick={handleUpdateDevices}>Actualizar Todos</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,QAAQ,CAAC;EACpD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;EAChD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC7C,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEjD;EACA,MAAMoB,SAAS,GAAIC,EAAE,IAAK;IACxB,MAAMC,KAAK,GAAG,kKAAkK;IAChL,OAAOA,KAAK,CAACC,IAAI,CAACF,EAAE,CAAC;EACvB,CAAC;;EAED;EACA,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BT,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,IAAI;MACF,MAAMU,GAAG,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAC,+BAA+B,CAAC;MAC5Db,UAAU,CAACY,GAAG,CAACE,IAAI,CAAC;MACpBC,OAAO,CAACH,GAAG,CAACE,IAAI,CAACE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACT,EAAE,CAAC,CAAC,CAAC,CAAE;IACrC,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;IAC/C,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACd,SAAS,CAACd,OAAO,CAAC,EAAE;MACvBW,UAAU,CAAC,kCAAkC,CAAC;MAC9C;IACF;IAEA,IAAI;MACF,MAAMhB,KAAK,CAACkC,IAAI,CAAC,+BAA+B,EAAE;QAChDd,EAAE,EAAEf,OAAO,CAAC8B,IAAI,CAAC,CAAC;QAClBC,IAAI,EAAE7B,SAAS,CAAC4B,IAAI,CAAC,CAAC;QACtBE,IAAI,EAAE5B;MACR,CAAC,CAAC;MACFO,UAAU,CAAC,iCAAiC,CAAC;MAC7CV,UAAU,CAAC,EAAE,CAAC;MACdE,YAAY,CAAC,EAAE,CAAC;MAChBE,YAAY,CAAC,QAAQ,CAAC;MACtBa,YAAY,CAAC,CAAC,CAAC,CAAE;IACnB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZd,UAAU,CAAC,+BAA+B,CAAC;MAC3Ce,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAC5C;EACF,CAAC;;EAED;EACA,MAAMQ,YAAY,GAAG,MAAOlB,EAAE,IAAK;IACjC,IAAI;MACF,MAAMpB,KAAK,CAACuC,MAAM,CAAC,iCAAiCnB,EAAE,EAAE,CAAC;MACzDG,YAAY,CAAC,CAAC,CAAC,CAAE;IACnB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAMH,OAAO,GAAG,MAAOa,GAAG,IAAK;IAC7B1B,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;IACnB,IAAI;MACF,MAAMU,GAAG,GAAG,MAAMxB,KAAK,CAACkC,IAAI,CAAC,4BAA4B,EAAE;QAAEvB,OAAO,EAAE6B;MAAI,CAAC,CAAC;MAC5E5B,UAAU,CAACD,OAAO,IAChBA,OAAO,CAACiB,GAAG,CAACa,GAAG,IAAI;QACjB,MAAMC,KAAK,GAAGlB,GAAG,CAACE,IAAI,CAACiB,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACT,EAAE,KAAKqB,GAAG,CAACrB,EAAE,CAAC;QACjD,OAAOsB,KAAK,GAAG;UAAE,GAAGD,GAAG;UAAEG,KAAK,EAAEF,KAAK,CAACE;QAAM,CAAC,GAAGH,GAAG;MACrD,CAAC,CACH,CAAC;IACH,CAAC,CAAC,OAAOX,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;IAC9C,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB;EACF,CAAC;;EAED;EACA,MAAM+B,cAAc,GAAIR,IAAI,IAAK;IAC/B,MAAMS,YAAY,GAAG;MACnBC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE,oBAAoB;MAC5BC,OAAO,EAAE;IACX,CAAC;IACD,OAAOJ,YAAY,CAACT,IAAI,CAAC,IAAIS,YAAY,CAACI,OAAO;EACnD,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMX,GAAG,GAAG7B,OAAO,CAACiB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACT,EAAE,CAAC,CAAC,CAAE;IACrCO,OAAO,CAACa,GAAG,CAAC,CAAC,CAAE;EACjB,CAAC;;EAED;EACA,MAAMY,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,MAAM,GAAG1C,OAAO,CAAC2C,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;MAC7C,MAAMC,OAAO,GAAGD,MAAM,CAACpC,EAAE,CAACsC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAE;MAC7D,IAAI,CAACL,GAAG,CAACE,OAAO,CAAC,EAAE;QACjBF,GAAG,CAACE,OAAO,CAAC,GAAG,EAAE;MACnB;MACAF,GAAG,CAACE,OAAO,CAAC,CAACI,IAAI,CAACL,MAAM,CAAC;MACzB,OAAOD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAOF,MAAM;EACf,CAAC;;EAED;EACA,MAAMS,eAAe,GAAIL,OAAO,IAAK;IACnCvC,YAAY,CAACuC,OAAO,CAAC;EACvB,CAAC;EAED3D,SAAS,CAAC,MAAM;IACdyB,YAAY,CAAC,CAAC,CAAC,CAAE;IACjB,MAAMwC,QAAQ,GAAGC,WAAW,CAAC,MAAMzC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAE;IAC5D,OAAO,MAAM0C,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAE;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,YAAY,GAAGd,qBAAqB,CAAC,CAAC;EAE5C,oBACElD,OAAA;IAAKiE,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,gBAC1BnE,OAAA;MAAAmE,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEhCvE,OAAA;MAAKiE,KAAK,EAAE;QAAEO,YAAY,EAAE;MAAG,CAAE;MAAAL,QAAA,gBAC/BnE,OAAA;QACEyE,KAAK,EAAEtE,OAAQ;QACfuE,QAAQ,EAAGC,CAAC,IAAKvE,UAAU,CAACuE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CI,WAAW,EAAC;MAAY;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACFvE,OAAA;QACEyE,KAAK,EAAEpE,SAAU;QACjBqE,QAAQ,EAAGC,CAAC,IAAKrE,YAAY,CAACqE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC9CI,WAAW,EAAC;MAAgC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACFvE,OAAA;QAAQyE,KAAK,EAAElE,SAAU;QAACmE,QAAQ,EAAGC,CAAC,IAAKnE,YAAY,CAACmE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAN,QAAA,gBACtEnE,OAAA;UAAQyE,KAAK,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtCvE,OAAA;UAAQyE,KAAK,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACtCvE,OAAA;UAAQyE,KAAK,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACTvE,OAAA;QAAQ8E,OAAO,EAAE/C,SAAU;QAAAoC,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,EAEL1D,OAAO,iBAAIb,OAAA;MAAAmE,QAAA,EAAItD;IAAO;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE5BvE,OAAA;MAAAmE,QAAA,EAEGY,MAAM,CAACC,IAAI,CAAChB,YAAY,CAAC,CAACtC,GAAG,CAAC6B,OAAO,iBACpCvD,OAAA;QAEE8E,OAAO,EAAEA,CAAA,KAAMlB,eAAe,CAACL,OAAO,CAAE;QACxCU,KAAK,EAAE;UACLgB,MAAM,EAAE,CAAC;UACTf,OAAO,EAAE,EAAE;UACXgB,eAAe,EAAEnE,SAAS,KAAKwC,OAAO,GAAG,SAAS,GAAG,MAAM;UAC3D4B,KAAK,EAAEpE,SAAS,KAAKwC,OAAO,GAAG,MAAM,GAAG,MAAM;UAC9C6B,YAAY,EAAE;QAChB,CAAE;QAAAjB,QAAA,EAEDZ;MAAO,GAVHA,OAAO;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWN,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGNvE,OAAA;MAAAmE,QAAA,EACGpD,SAAS,IAAIiD,YAAY,CAACjD,SAAS,CAAC,iBACnCf,OAAA;QAAAmE,QAAA,EACGH,YAAY,CAACjD,SAAS,CAAC,CAACW,GAAG,CAAEC,CAAC,iBAC7B3B,OAAA;UAAeiE,KAAK,EAAE;YAAEoB,OAAO,EAAE,MAAM;YAAEC,UAAU,EAAE,QAAQ;YAAEd,YAAY,EAAE;UAAO,CAAE;UAAAL,QAAA,gBACpFnE,OAAA;YAAKuF,GAAG,EAAE5C,cAAc,CAAChB,CAAC,CAACQ,IAAI,CAAE;YAACqD,GAAG,EAAE7D,CAAC,CAACQ,IAAK;YAAC8B,KAAK,EAAE;cAAEwB,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,WAAW,EAAE;YAAG;UAAE;YAAAvB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpGvE,OAAA;YAAAmE,QAAA,GAAM,GAAC,EAACxC,CAAC,CAACO,IAAI,EAAC,UAAG,EAACP,CAAC,CAACT,EAAE,EAAC,UAAG,EAACS,CAAC,CAACe,KAAK,IAAI,IAAI,GAAG,GAAG,GAAGf,CAAC,CAACe,KAAK,GAAG,WAAW,GAAG,aAAa,EAAC,GAAC;UAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAClGvE,OAAA;YAAQ8E,OAAO,EAAEA,CAAA,KAAM1C,YAAY,CAACT,CAAC,CAACT,EAAE,CAAE;YAAC+C,KAAK,EAAE;cAAE2B,UAAU,EAAE;YAAG,CAAE;YAAAzB,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAHlF5C,CAAC,CAACT,EAAE;UAAAkD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIT,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IACL;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAEL5D,OAAO,iBAAIX,OAAA;MAAAmE,QAAA,EAAG;IAAyC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAG5DvE,OAAA;MAAQ8E,OAAO,EAAE7B,mBAAoB;MAAAkB,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV;AAACrE,EAAA,CA9LQD,GAAG;AAAA4F,EAAA,GAAH5F,GAAG;AAgMZ,eAAeA,GAAG;AAAC,IAAA4F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}