{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst ping = require('ping');\n\n// Configuraci贸n de Express\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// Conexi贸n a MongoDB\nmongoose.connect('mongodb+srv://jeissonetworks:iivf4eZ0tKEYaY2v@monitorping.a2sqryl.mongodb.net/?retryWrites=true&w=majority&appName=MonitorPing', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('Conectado a MongoDB');\n}).catch(err => {\n  console.log('Error al conectar a MongoDB:', err);\n});\n\n// Esquema del dispositivo\nconst deviceSchema = new mongoose.Schema({\n  ip: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  name: String,\n  type: {\n    type: String,\n    enum: ['antena', 'router', 'server'],\n    required: true\n  },\n  alive: Boolean\n});\nconst Device = mongoose.model('Device', deviceSchema);\n\n// Rutas\napp.get('/devices', async (req, res) => {\n  try {\n    const devices = await Device.find();\n    res.json(devices);\n  } catch (err) {\n    res.status(500).json({\n      error: 'Error al obtener dispositivos'\n    });\n  }\n});\napp.post('/devices', async (req, res) => {\n  const {\n    ip,\n    name,\n    type\n  } = req.body;\n\n  // Verificar si el dispositivo con la misma IP ya existe\n  const existingDevice = await Device.findOne({\n    ip\n  });\n  if (existingDevice) {\n    return res.status(400).json({\n      error: 'Dispositivo con esta IP ya existe'\n    });\n  }\n\n  // Crear y guardar el nuevo dispositivo\n  const device = new Device({\n    ip,\n    name,\n    type,\n    alive: null\n  });\n  try {\n    await device.save();\n    res.json(device);\n  } catch (err) {\n    res.status(500).json({\n      error: 'Error al agregar dispositivo'\n    });\n  }\n});\napp.delete('/devices/:ip', async (req, res) => {\n  const {\n    ip\n  } = req.params;\n  try {\n    await Device.deleteOne({\n      ip\n    });\n    res.json({\n      message: 'Dispositivo eliminado'\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: 'Error al eliminar dispositivo'\n    });\n  }\n});\n\n// Ruta para hacer ping a los dispositivos de forma real\napp.post('/ping', async (req, res) => {\n  const {\n    devices\n  } = req.body;\n\n  // Realizar ping real a cada dispositivo usando el paquete 'ping'\n  const pingResults = await Promise.all(devices.map(async ip => {\n    try {\n      const {\n        alive\n      } = await ping.promise.probe(ip);\n      return {\n        ip,\n        alive\n      };\n    } catch (err) {\n      console.error('Error al hacer ping a', ip, err);\n      return {\n        ip,\n        alive: false\n      }; // Si ocurre un error, marcar como inactivo\n    }\n  }));\n\n  // Actualizar el estado de cada dispositivo\n  for (let i = 0; i < pingResults.length; i++) {\n    const result = pingResults[i];\n    await Device.updateOne({\n      ip: result.ip\n    }, {\n      alive: result.alive\n    });\n  }\n  res.json(pingResults);\n});\n\n// Iniciar servidor\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n  console.log(`Servidor corriendo en el puerto ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","ping","app","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","deviceSchema","Schema","ip","type","String","required","unique","name","enum","alive","Boolean","Device","model","get","req","res","devices","find","status","error","post","body","existingDevice","findOne","device","save","delete","params","deleteOne","message","pingResults","Promise","all","map","promise","probe","i","length","result","updateOne","PORT","process","env","listen"],"sources":["C:/Users/MSI/Downloads/monitor-ping-mongo/frontend/src/App.jsx"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst ping = require('ping');\n\n// Configuraci贸n de Express\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// Conexi贸n a MongoDB\nmongoose.connect('mongodb+srv://jeissonetworks:iivf4eZ0tKEYaY2v@monitorping.a2sqryl.mongodb.net/?retryWrites=true&w=majority&appName=MonitorPing', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n}).then(() => {\n  console.log('Conectado a MongoDB');\n}).catch((err) => {\n  console.log('Error al conectar a MongoDB:', err);\n});\n\n// Esquema del dispositivo\nconst deviceSchema = new mongoose.Schema({\n  ip: { type: String, required: true, unique: true },\n  name: String,\n  type: { type: String, enum: ['antena', 'router', 'server'], required: true },\n  alive: Boolean,\n});\n\nconst Device = mongoose.model('Device', deviceSchema);\n\n// Rutas\napp.get('/devices', async (req, res) => {\n  try {\n    const devices = await Device.find();\n    res.json(devices);\n  } catch (err) {\n    res.status(500).json({ error: 'Error al obtener dispositivos' });\n  }\n});\n\napp.post('/devices', async (req, res) => {\n  const { ip, name, type } = req.body;\n\n  // Verificar si el dispositivo con la misma IP ya existe\n  const existingDevice = await Device.findOne({ ip });\n  if (existingDevice) {\n    return res.status(400).json({ error: 'Dispositivo con esta IP ya existe' });\n  }\n\n  // Crear y guardar el nuevo dispositivo\n  const device = new Device({ ip, name, type, alive: null });\n  try {\n    await device.save();\n    res.json(device);\n  } catch (err) {\n    res.status(500).json({ error: 'Error al agregar dispositivo' });\n  }\n});\n\napp.delete('/devices/:ip', async (req, res) => {\n  const { ip } = req.params;\n\n  try {\n    await Device.deleteOne({ ip });\n    res.json({ message: 'Dispositivo eliminado' });\n  } catch (err) {\n    res.status(500).json({ error: 'Error al eliminar dispositivo' });\n  }\n});\n\n// Ruta para hacer ping a los dispositivos de forma real\napp.post('/ping', async (req, res) => {\n  const { devices } = req.body;\n\n  // Realizar ping real a cada dispositivo usando el paquete 'ping'\n  const pingResults = await Promise.all(devices.map(async (ip) => {\n    try {\n      const { alive } = await ping.promise.probe(ip);\n      return { ip, alive };\n    } catch (err) {\n      console.error('Error al hacer ping a', ip, err);\n      return { ip, alive: false }; // Si ocurre un error, marcar como inactivo\n    }\n  }));\n\n  // Actualizar el estado de cada dispositivo\n  for (let i = 0; i < pingResults.length; i++) {\n    const result = pingResults[i];\n    await Device.updateOne({ ip: result.ip }, { alive: result.alive });\n  }\n\n  res.json(pingResults);\n});\n\n// Iniciar servidor\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n  console.log(`Servidor corriendo en el puerto ${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}